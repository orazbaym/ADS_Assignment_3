package com.company;
import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Objects;

class HashNode<K, V> {
    K key;
    V value;
    final int hashCode;
    HashNode<K, V> next;

    public HashNode(K key, V value, int hashCode)
    {
        this.key = key;
        this.value = value;
        this.hashCode = hashCode;
    }
}

class Map<K, V> {
    private ArrayList<HashNode<K, V> > bucketArray;

    private int numBuckets;
    private int size;

    public Map()
    {
        bucketArray = new ArrayList<>();
        numBuckets = 10;
        size = 0;

        for (int i = 0; i < numBuckets; i++)
            bucketArray.add(null);
    }

    public int size() { 
        return size; 
    }
    public boolean isEmpty() { 
        return size() == 0; 
    }

    private final int hashCode (K key) {
        return Objects.hashCode(key);
    }

    private int getBucketIndex(K key)
    {
        int hashCode = hashCode(key);
        int index = hashCode % numBuckets;
        index = index < 0 ? index * -1 : index;
        return index;
    }

    public V get(K key)
    {
        // Find head of chain for given key
        int bucketIndex = getBucketIndex(key);
        int hashCode = hashCode(key);

        HashNode<K, V> head = bucketArray.get(bucketIndex);

        // Search key in chain
        while (head != null) {
            if (head.key.equals(key) && head.hashCode == hashCode)
                return head.value;
            head = head.next;
        }

        // If key not found
        return null;
    }

    public static void main(String[] args)
    {
        Map<String, Integer> map = new Map<>();
        System.out.println(map.size());
        System.out.println(map.isEmpty());
    }
}
